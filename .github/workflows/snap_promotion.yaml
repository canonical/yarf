name: YARF snap promotion

on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  actions: write

concurrency:
  group: promote-yarf-${{ github.ref }}
  cancel-in-progress: true

jobs:
  promote:
    name: ${{ matrix.track }} / ${{ matrix.arch }} — ${{ matrix.from }} to ${{ matrix.to }}
    runs-on: ${{ fromJSON(matrix.runs_on) }}
    strategy:
      fail-fast: false
      matrix:
        track: [latest]
        arch:  [amd64, arm64]
        lane:  [edge_to_beta]
        include:
          - arch: amd64
            runs_on: '["self-hosted","linux","noble","x64","large"]'
            snap_arch: amd64
          - arch: arm64
            runs_on: '["self-hosted","linux","noble","arm64","large"]'
            snap_arch: arm64

          - lane: edge_to_beta
            from: edge
            to: beta
            test_workflow: run_canary_test.yaml

    env:
      SNAP_NAME: yarf
      TRACK: ${{ matrix.track }}
      ARCH: ${{ matrix.arch }}
      SNAP_ARCH: ${{ matrix.snap_arch }}
      FROM: ${{ matrix.from }}
      TO: ${{ matrix.to }}
      TEST_WORKFLOW: ${{ matrix.test_workflow }}
      SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT }}

    steps:
      - name: Context
        shell: bash
        run: |
          echo "Track: ${TRACK}"
          echo "Arch:  ${ARCH} (snap_arch=${SNAP_ARCH})"
          echo "Lane:  ${FROM} → ${TO}"
          echo "Tests: ${TEST_WORKFLOW}"

      - name: Ensure tooling
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v snapcraft >/dev/null 2>&1; then
            sudo snap install snapcraft --classic
          fi
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: Get versions in ${{ env.TRACK }}/${{ env.FROM }} and ${{ env.TRACK }}/${{ env.TO }}
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          echo "Fetching channel info for ${SNAP_NAME}..."

          snap info "${SNAP_NAME}" \
          | awk '/^[[:space:]]*[[:alnum:].-]+\/(edge|beta|candidate|stable):/ {
              gsub(":","",$1)
              ver=$2
              rev=""
              if (match($0, /\(([0-9]+)\)/, m)) rev=m[1]
              print $1, ver, rev
            }' > channels.txt || true

          echo "Channel map (channel version revision):"
          cat channels.txt || true

          FROM_VER=$(awk -v t="${TRACK}/${FROM}" '$1==t{print $2}' channels.txt || true)
          TO_VER=$(awk -v t="${TRACK}/${TO}"   '$1==t{print $2}' channels.txt || true)

          FROM_REV=$(awk -v t="${TRACK}/${FROM}" '$1==t{print $3}' channels.txt || true)
          TO_REV=$(awk -v t="${TRACK}/${TO}"   '$1==t{print $3}' channels.txt || true)

          if [[ -z "${FROM_VER:-}" ]]; then
            echo "No version found in ${TRACK}/${FROM}."
            exit 1
          fi

          # change to <= after testing CI
          if [[ -n "${TO_VER:-}" && "$FROM_VER" < "$TO_VER" ]]; then
            echo "Versions match ($FROM_VER) in ${TRACK} (${FROM} vs ${TO}). Nothing to do."
            echo "should_continue=false" >> "$GITHUB_OUTPUT"
          else
            echo "Version in ${FROM}=$FROM_VER (rev $FROM_REV) > ${TO}=$TO_VER (rev ${TO_REV:-none}) in ${TRACK}."
            echo "${FROM} revision is $FROM_REV"
            echo "from_version=$FROM_VER" >> "$GITHUB_OUTPUT"
            echo "should_continue=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Install ${{ env.TRACK }}/${{ env.FROM }} snap (${{ env.SNAP_ARCH }})
        if: steps.versions.outputs.should_continue == 'true'
        id: download
        shell: bash
        run: |
          set -euo pipefail
          sudo snap install "${SNAP_NAME}" --channel="${TRACK}/${FROM}"

      - name: Run lane-specific tests
        if: steps.versions.outputs.should_continue == 'true'
        id: tests
        shell: bash
        run: |
          set -euo pipefail
          if [[ -x "${TEST_CMD}" ]]; then
            "${TEST_CMD}" --track "${TRACK}" --arch "${ARCH}" --from "${FROM}" --to "${TO}"
          else
            echo "Test command ${TEST_CMD} not found or not executable."
            # exit 1
          fi

      - name: Promote ${{ env.TRACK }}/${{ env.FROM }} to ${{ env.TRACK }}/${{ env.TO }} for ${{ env.SNAP_ARCH }}
        if: steps.versions.outputs.should_continue == 'true'
        env:
          SNAPCRAFT_HAS_TTY: "true" # this is necessary because snapcraft will not allow --yes for promotions of the edge channel
        run: |
          # Note: using `yes |` instead of `--yes` because snapcraft will
          #       refuse to non-interactively promote a snap from the edge
          #       channel if it is done without any branch qualifiers
          # yes | snapcraft promote yarf --from-channel latest/edge --to-channel latest/beta
