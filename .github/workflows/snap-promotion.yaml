name: YARF snap promotion

on:
  pull_request:
  schedule:
    - cron: '00 00 * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: write

concurrency:
  group: promote-yarf-${{ github.ref }}
  cancel-in-progress: true

jobs:
  define-matrix:
    name: Define job matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.out.outputs.matrix }}
    steps:
      - name: Define matrix
        id: out
        shell: bash
        run: |
          cat > matrix.json <<'JSON'
          {
            "track": ["latest"],
            "arch":  ["amd64","arm64"],
            "lane":  ["edge_to_beta"],
            "include": [
              {
                "arch": "amd64",
                "runs_on": "ubuntu-24.04",
              },
              {
                "arch": "arm64",
                "runs_on": "ubuntu-24.04-arm",
              },
              {
                "lane": "edge_to_beta",
                "from": "edge",
                "to":   "beta",
              }
            ]
          }
          JSON
          {
            echo "matrix<<EOF"
            cat matrix.json
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

  check-versions:
    name: ${{ matrix.track }} / ${{ matrix.from }} to ${{ matrix.to }} (${{ matrix.arch }})
    needs: define-matrix
    runs-on: ${{ matrix.runs_on }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}

    outputs:
      should_continue: ${{ steps.versions.outputs.should_continue }}
      from_version:    ${{ steps.versions.outputs.from_version }}
      from_channel:    ${{ steps.versions.outputs.from_channel }}
      lane:            ${{ matrix.lane }}

    steps:
      - name: Context
        shell: bash
        run: |
          echo "Track: ${{ matrix.track }}"
          echo "Arch:  ${{ matrix.arch }}"
          echo "Lane:  ${{ matrix.from }} --> ${{ matrix.to }}"
          echo "Tests: ${TEST_WORKFLOW}"

      - name: Get versions in ${{ matrix.track }}/${{ matrix.from }} and ${{ matrix.track }}/${{ matrix.to }}
        id: versions
        shell: bash
        run: |
          set -euo pipefail
          echo "Fetching channel info for yarf..."

          snap info yarf \
          | awk '/^[[:space:]]*[[:alnum:].-]+\/(edge|beta|candidate|stable):/ {
              gsub(":","",$1)
              ver=$2
              rev=""
              if (match($0, /\(([0-9]+)\)/, m)) rev=m[1]
              print $1, ver, rev
            }' > channels.txt || true

          echo "Channel map (channel version revision):"
          cat channels.txt || true

          FROM_VER=$(awk -v t="${{ matrix.track }}/${{ matrix.from }}" '$1==t{print $2}' channels.txt || true)
          TO_VER=$(awk -v t="${{ matrix.track }}/${{ matrix.to }}"   '$1==t{print $2}' channels.txt || true)

          FROM_REV=$(awk -v t="${{ matrix.track }}/${{ matrix.from }}" '$1==t{print $3}' channels.txt || true)
          TO_REV=$(awk -v t="${{ matrix.track }}/${{ matrix.to }}"   '$1==t{print $3}' channels.txt || true)

          if [[ -z "${FROM_VER:-}" ]]; then
            echo "No version found in ${{ matrix.track }}/${{ matrix.from }}."
            exit 1
          fi

          if [[ -n "${TO_VER:-}" ]] && dpkg --compare-versions "$FROM_VER" lt "$TO_VER"; then
            echo "Versions match ($FROM_VER) in ${{ matrix.track }} (${{ matrix.from }} vs ${{ matrix.to }}). Nothing to do."
            echo "should_continue=false" >> "$GITHUB_OUTPUT"
          else
            echo "Version in ${{ matrix.from }}=$FROM_VER (rev $FROM_REV) > ${{ matrix.to }}=$TO_VER (rev ${TO_REV:-none}) in ${{ matrix.track }}."
            echo "${{ matrix.from }} revision is $FROM_REV"
            echo "should_continue=true" >> "$GITHUB_OUTPUT"
            echo "from_version=$FROM_VER" >> "$GITHUB_OUTPUT"
            echo "from_channel=${{ matrix.track }}/${{ matrix.from }}" >> "$GITHUB_OUTPUT"
          fi

  canary:
    name: Canary Test
    needs:
      - define-matrix
      - check-versions
    if: >
      needs.check-versions.outputs.should_continue == 'true' &&
      needs.check-versions.outputs.lane == 'edge_to_beta'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}

    uses: ./.github/workflows/canary-test.yaml
    with:
      TRACK:   ${{ matrix.track }}
      CHANNEL: ${{ matrix.from }}
      VER:     ${{ needs.check-versions.outputs.from_version }}
      ARCH:    ${{ matrix.arch }}
      RUNNER:  ${{ matrix.runs_on }}

  promote:
    name: Promote â€” ${{ matrix.track }} / ${{ matrix.from }} to ${{ matrix.to }} ( ${{ matrix.arch }} )
    needs:
      - define-matrix
      - canary
    if: needs.canary.outputs.passed == 'true'
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.define-matrix.outputs.matrix) }}
    runs-on: ${{ matrix.runs_on }}

    steps:
      - name: Install snapcraft
        shell: bash
        run: |
          set -euo pipefail
          if ! command -v snapcraft >/dev/null 2>&1; then
            sudo snap install snapcraft --classic
          fi

      - name: Promote ${{ matrix.track }}/${{ matrix.from }} to ${{ matrix.track }}/${{ matrix.to }} for ${{ matrix.arch }}
        env:
          # this is necessary because snapcraft will not allow --yes for promotions of the edge channel
          SNAPCRAFT_HAS_TTY: "true"
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT }}
        run: |
          # Note: using `yes |` instead of `--yes` because snapcraft will
          #       refuse to non-interactively promote a snap from the edge
          #       channel if it is done without any branch qualifiers
          # yes | snapcraft promote yarf --from-channel ${{ matrix.track }}/${{ matrix.from }} --to-channel ${{ matrix.track }}/${{ matrix.to }}
