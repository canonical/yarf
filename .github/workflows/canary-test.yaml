name: Canary test

on:
  workflow_call:
    inputs:
      TRACK:
        description: 'YARF track to promote within (e.g., latest)'
        type: string
        required: true
      CHANNEL:
        description: 'YARF channel to promote from (e.g., stable, candidate, beta, edge)'
        type: string
        required: true
      VER:
        description: 'The version of YARF'
        type: string
        required: true
      ARCH:
        description: 'The architecture of the snap to promote (e.g., amd64, arm64)'
        type: string
        required: true
      RUNNER:
        description: 'The type of machine to run the canary test on'
        type: string
        required: true

    outputs:
      passed:
        description: 'Whether all matrix canary tests passed'
        value: ${{ jobs.summarize.outputs.passed }}

concurrency:
  group: canary-test-${{ github.ref }}-${{ inputs.TRACK }}-${{ inputs.CHANNEL }}-${{ inputs.ARCH }}
  cancel-in-progress: true

jobs:
  canary-test:
    name: ${{ matrix.platform }} - Canary test yarf snap at channel ${{ inputs.TRACK }}/${{ inputs.CHANNEL }}
    runs-on: ${{ inputs.RUNNER }}
    strategy:
      fail-fast: false
      matrix:
        platform: [Vnc, Mir]
        include:
          - platform: Vnc
            install-platform-deps-cmds: |
              sudo snap install mir-test-tools
              sudo apt update -qq
              sudo apt-get --yes --no-install-recommends install \
              ffmpeg \
              inotify-tools \
              wayvnc \
              gnome-calculator \
              eog

            prepare-platform-cmds: |
              export WAYLAND_DEBUG=client

              # Start Mir on a virtual display (doesn't require graphics hardware)
              mir-test-tools.demo-server \
                --add-wayland-extensions zwlr_screencopy_manager_v1:zwlr_virtual_pointer_manager_v1 \
                --platform-display-libs mir:virtual \
                --virtual-output 1280x1024 &

              # Wait for the compositor to start
              inotifywait --event create --include "^$XDG_RUNTIME_DIR/wayland-99\$" $XDG_RUNTIME_DIR

              # Start vnc session
              wayvnc &

          - platform: Mir
            install-platform-deps-cmds: |
              sudo snap install mir-test-tools
              sudo apt update -qq
              sudo apt-get --yes --no-install-recommends install \
                ffmpeg \
                inotify-tools \
                gnome-calculator

            prepare-platform-cmds: |
              export WAYLAND_DEBUG=client

              # Start Mir on a virtual display (doesn't require graphics hardware)
              mir-test-tools.demo-server \
                --add-wayland-extensions zwlr_screencopy_manager_v1:zwlr_virtual_pointer_manager_v1 \
                --platform-display-libs mir:virtual \
                --virtual-output 1280x1024 &

              # Wait for the compositor to start
              inotifywait --event create --include "^$XDG_RUNTIME_DIR/wayland-99\$" $XDG_RUNTIME_DIR

    env:
      TEST_SUITE_PATH: tests
      EXAMPLE_PATH: examples
      GITHUB_WORKFLOWS: .github

    steps:
      - name: Install workflow dependencies
        shell: bash
        run: |
          sudo apt update -qq
          sudo apt install -y \
            git-lfs \
            jq

          pip install check-jsonschema

      - name: Check out tests
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          lfs: true
          fetch-depth: 1
          sparse-checkout: |
            ${{ env.TEST_SUITE_PATH }}
            ${{ env.EXAMPLE_PATH }}
            ${{ env.GITHUB_WORKFLOWS }}
          sparse-checkout-cone-mode: false

      - name: Install YARF from channel
        shell: bash
        run: |
          set -euo pipefail
          sudo snap install yarf --channel="${{ inputs.TRACK }}/${{ inputs.CHANNEL }}"

      - name: Install platform ${{ matrix.platform }} dependencies
        shell: bash
        run: |
          set -euo pipefail
          eval "$(
          cat <<'SCRIPT'
          ${{ matrix.install-platform-deps-cmds }}
          SCRIPT
          )"

      - name: Run canary test
        id: test
        shell: bash
        run: |
          set -euo pipefail

          export WAYLAND_DISPLAY=wayland-99
          eval "$(
          cat <<'SCRIPT'
          ${{ matrix.prepare-platform-cmds }}
          SCRIPT
          )"

          # Avoid GNOME apps waiting for portals
          dbus-run-session -- gnome-calculator &

          snap run yarf --platform=${{ matrix.platform }} --output-format=TestSubmissionSchema ${{ env.TEST_SUITE_PATH }}/canary_test

      - name: Download test submission schema and validate
        run: |
          version=$(jq -r '.version' ~/snap/yarf/common/yarf-outdir/TestSubmissionSchema_output.json)
          check-jsonschema --schemafile https://raw.githubusercontent.com/canonical/test-submission-schema/refs/heads/main/test_submission_schema/schemas/v${version}.json ~/snap/yarf/common/yarf-outdir/TestSubmissionSchema_output.json

      - name: Pin YARF to the requested version in pyproject.toml
        run: bash .github/scripts/canary-test/pin-yarf-version.sh

      - name: Build yarf-example-plugin snap
        uses: snapcore/action-build@3bdaa03e1ba6bf59a65f84a751d943d549a54e79
        with:
          path: examples/yarf-example-plugin

      - name: Install yarf-example-plugin snap
        shell: bash
        run: |
          set -euo pipefail
          sudo snap install examples/yarf-example-plugin/*.snap --dangerous

      - name: Connect platform plugin interface
        run: |
          sudo snap connect yarf-example-plugin:platform-plugins yarf:platform-plugins

      - name: Run plugin tests
        run: |
          snap run yarf --platform Example tests/plugin_suite

      - name: Run Keyword tests - VideoInput imaging
        run: |
          set -euo pipefail

          export WAYLAND_DISPLAY=wayland-0
          eval "$(
          cat <<'SCRIPT'
          ${{ matrix.prepare-platform-cmds }}
          SCRIPT
          )"

          # Avoid GNOME apps waiting for portals
          dbus-run-session -- gnome-calculator &

          snap run yarf --platform Mir tests/keyword_suite -- --suite video_image_test

      - name: Run Keyword tests - VideoInput text
        run: |
          set -euo pipefail

          export WAYLAND_DISPLAY=wayland-1
          eval "$(
          cat <<'SCRIPT'
          ${{ matrix.prepare-platform-cmds }}
          SCRIPT
          )"

          # Avoid GNOME apps waiting for portals
          dbus-run-session -- eog -f tests/keyword_suite/text/text.png &

          snap run yarf --platform Mir tests/keyword_suite -- --suite video_text_test

      - name: Run Keyword tests - Hid keyboard
        run: |
          set -euo pipefail

          export WAYLAND_DISPLAY=wayland-2
          eval "$(
          cat <<'SCRIPT'
          ${{ matrix.prepare-platform-cmds }}
          SCRIPT
          )"

          # Wait for the compositor to start
          inotifywait --event create --include "^$XDG_RUNTIME_DIR/wayland-3\$" $XDG_RUNTIME_DIR

          snap run yarf --platform Mir tests/keyword_suite -- --suite hid_keyboard_test 2> ~/wayland.trace

      - name: Run Keyword tests - Hid pointer
        run: |
          set -euo pipefail

          export WAYLAND_DISPLAY=wayland-3
          eval "$(
          cat <<'SCRIPT'
          ${{ matrix.prepare-platform-cmds }}
          SCRIPT
          )"

          # Wait for the compositor to start
          inotifywait --event create --include "^$XDG_RUNTIME_DIR/wayland-4\$" $XDG_RUNTIME_DIR

          snap run yarf --platform Mir tests/keyword_suite -- --suite hid_pointer_test 2> ~/wayland.trace

      - if: failure()
        name: Collect test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: yarf-canary-output-${{ matrix.platform }}-${{ inputs.ARCH }}
          path: ~/snap/yarf/common/yarf-outdir/*
          retention-days: 5

      - if: failure() && runner.debug
        name: Setup upterm session (restart with "Enable debug logging" to activate)
        uses: canonical/action-tmate@e5c7151931ca95bad1c6f4190c730ecf8c7dde48
        with:
          limit-access-to-actor: true

  summarize:
    needs: canary-test
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.set.outputs.passed }}
    steps:
      - id: set
        run: |
          if [[ "${{ needs.canary-test.result }}" == "success" ]]; then
            echo "passed=true" >> "$GITHUB_OUTPUT"
          else
            echo "passed=false" >> "$GITHUB_OUTPUT"
          fi
