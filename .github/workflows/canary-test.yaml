name: Canary test

on:
  workflow_call:
    inputs:
      NAME:
        description: 'The name of the snap to promote'
        type: string
        required: true
      TRACK:
        description: 'The snap track to promote within (e.g., latest)'
        type: string
        required: true
      CHANNEL:
        description: 'The snap channel to promote from (e.g., stable, candidate, beta, edge)'
        type: string
        required: true
      VER:
        description: 'The version of the snap to promote'
        type: string
        required: true
      REV:
        description: 'The revision number of the snap to promote'
        type: string
        required: true
      ARCH:
        description: 'The architecture of the snap to promote (e.g., amd64, arm64)'
        type: string
        required: true
      MACHINE_TYPE:
        description: 'The type of machine to run the canary test on'
        type: string
        required: true

    outputs:
      passed:
        description: 'Whether all matrix canary tests passed'
        value: ${{ jobs.summarize.outputs.passed }}

concurrency:
  group: canary-test-${{ github.ref }}-${{ inputs.TRACK }}-${{ inputs.CHANNEL }}-${{ inputs.ARCH }}
  cancel-in-progress: true

jobs:
  canary-test:
    name: ${{ matrix.platform }} - Canary test ${{ inputs.NAME }} snap at channel ${{ inputs.TRACK }}/${{ inputs.CHANNEL }} (rev. ${{ inputs.REV }})
    runs-on: ${{ inputs.MACHINE_TYPE }}
    strategy:
      fail-fast: false
      matrix:
        platform: [Vnc, Mir]
        include:
          - platform: Vnc
            install-platform-deps-cmds: |
              sudo snap install mir-test-tools
              sudo apt update -qq
              sudo apt-get --yes --no-install-recommends install \
              ffmpeg \
              inotify-tools \
              wayvnc \
              gnome-calculator

            prepare-platform-cmds: |
              export WAYLAND_DISPLAY=wayland-99

              # Start Mir on a virtual display (doesn't require graphics hardware)
              mir-test-tools.demo-server \
                --add-wayland-extensions zwlr_screencopy_manager_v1:zwlr_virtual_pointer_manager_v1 \
                --platform-display-libs mir:virtual \
                --virtual-output 1280x1024 &

              # Wait for the compositor to start
              inotifywait --event create --include "^$XDG_RUNTIME_DIR/wayland-99\$" $XDG_RUNTIME_DIR

              # Start vnc session
              wayvnc &

              # Avoid GNOME apps waiting for portals
              dbus-run-session -- gnome-calculator &

          - platform: Mir
            install-platform-deps-cmds: |
              sudo snap install mir-test-tools
              sudo apt update -qq
              sudo apt-get --yes --no-install-recommends install \
                ffmpeg \
                inotify-tools \
                gnome-calculator

            prepare-platform-cmds: |
              export WAYLAND_DISPLAY=wayland-99

              # Start Mir on a virtual display (doesn't require graphics hardware)
              mir-test-tools.demo-server \
                --add-wayland-extensions zwlr_screencopy_manager_v1:zwlr_virtual_pointer_manager_v1 \
                --platform-display-libs mir:virtual \
                --virtual-output 1280x1024 &

              # Wait for the compositor to start
              inotifywait --event create --include "^$XDG_RUNTIME_DIR/wayland-99\$" $XDG_RUNTIME_DIR

              # Avoid GNOME apps waiting for portals
              dbus-run-session -- gnome-calculator &

    env:
      TEST_SUITE_PATH: tests
      EXAMPLE_PATH: examples

    steps:
      - name: Install workflow dependencies
        shell: bash
        run: |
          sudo apt update -qq
          sudo apt install -y \
            git-lfs \
            jq

          pip install check-jsonschema

      - name: Check out tests
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          lfs: true
          fetch-depth: 1
          sparse-checkout: |
            ${{ env.TEST_SUITE_PATH }}
            ${{ env.EXAMPLE_PATH }}
          sparse-checkout-cone-mode: false

      - name: Install YARF from channel
        shell: bash
        run: |
          set -euo pipefail
          sudo snap install "${{ inputs.NAME }}" --channel="${{ inputs.TRACK }}/${{ inputs.CHANNEL }}"

      - name: Install platform ${{ matrix.platform }} dependencies
        shell: bash
        run: |
          set -euo pipefail
          eval "$(
          cat <<'SCRIPT'
          ${{ matrix.install-platform-deps-cmds }}
          SCRIPT
          )"

      - name: Run canary test
        id: test
        shell: bash
        run: |
          set -euo pipefail
          eval "$(
          cat <<'SCRIPT'
          ${{ matrix.prepare-platform-cmds }}
          SCRIPT
          )"

          snap run yarf --platform=${{ matrix.platform }} --output-format=TestSubmissionSchema ${{ env.TEST_SUITE_PATH }}/canary_test

      - name: Download test submission schema and validate
        run: |
          version=$(jq -r '.version' ~/snap/${{ inputs.NAME }}/common/yarf-outdir/TestSubmissionSchema_output.json)
          check-jsonschema --schemafile https://raw.githubusercontent.com/canonical/test-submission-schema/refs/heads/main/test_submission_schema/schemas/v${version}.json ~/snap/${{ inputs.NAME }}/common/yarf-outdir/TestSubmissionSchema_output.json

      - name: Pin YARF to the requested version in pyproject.toml
        run: |
          set -euo pipefail
          f=examples/yarf-example-plugin/pyproject.toml

          # remove any bare "yarf"
          sed -i '/"yarf"\s*,\?$/d' "$f"

          # prepend the pinned YARF dep
          awk -v ver="${{ inputs.VER }}" '
            BEGIN{added=0}
            {print}
            /^\[project\]/{inproj=1}
            inproj && /^\s*dependencies\s*=\s*\[/{
              print "    \"yarf @ git+https://github.com/canonical/yarf.git@" ver "\","
              inproj=0; added=1
            }
            END{if(!added) exit 0}
          ' "$f" > "$f.tmp" && mv "$f.tmp" "$f"

      - name: Build yarf-example-plugin snap
        uses: snapcore/action-build@3bdaa03e1ba6bf59a65f84a751d943d549a54e79
        with:
          path: examples/yarf-example-plugin

      - name: Install yarf-example-plugin snap
        shell: bash
        run: |
          set -euo pipefail
          sudo snap install examples/yarf-example-plugin/*.snap --dangerous

      - name: Connect platform plugin interface
        run: |
          sudo snap connect yarf-example-plugin:platform-plugins yarf:platform-plugins

      - name: Onboard plugin
        run: |
          sudo snap run yarf-example-plugin.onboard-plugin

      - name: Run plugin tests
        run: |
          snap run yarf --platform Example tests/plugin_suite

      - if: failure()
        name: Collect test results
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: yarf-canary-output-${{ matrix.platform }}-${{ inputs.ARCH }}
          path: ~/snap/${{ inputs.NAME }}/common/yarf-outdir/*
          retention-days: 5

      - if: failure() && runner.debug
        name: Setup upterm session (restart with "Enable debug logging" to activate)
        uses: canonical/action-tmate@e5c7151931ca95bad1c6f4190c730ecf8c7dde48
        with:
          limit-access-to-actor: true

  summarize:
    needs: canary-test
    runs-on: ubuntu-latest
    outputs:
      passed: ${{ steps.set.outputs.passed }}
    steps:
      - id: set
        run: |
          if [[ "${{ needs.canary-test.result }}" == "success" ]]; then
            echo "passed=true" >> "$GITHUB_OUTPUT"
          else
            echo "passed=false" >> "$GITHUB_OUTPUT"
          fi
