[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "yarf"
authors = [
    {name = "Hou Nam Chiang", email = "douglas.chiang@canonical.com"},
    {name = "Paolo Gentili", email = "paolo.gentili@canonical.com"},
]
description = """
Yet Another Robot Framework (YARF) is an interface that 
allows developers to build complex test scenarios and 
bootstrap them locally, then work towards automated runs.
"""
version = "0.0.1"
readme = "README.md"
requires-python = ">=3.10, <3.12"
dependencies = [
    "opencv-python~=4.10.0.84",
    "Pillow~=10.4.0",
    "pytesseract~=0.3.10",
    "robotframework~=6.1.1",
    "robotframework-sshlibrary~=3.8.0",
    "rpaframework~=28.6.2",
    "rpaframework-recognition~=5.2.3",
    "rpyc~=5.3.1",
]

[project.scripts]
yarf = "yarf.main:main"

[tool.setuptools]
packages = [
    "yarf",
    "yarf.robot",
    "yarf.robot.libraries"
]

[tool.black]
line-length = 79
extend-exclude = '''
docs/*
'''

[tool.ruff]
# In addition to the standard set of exclusions, omit all tests, plus a specific file.
extend-exclude = [
    "docs/*",
]

[tool.pytest.ini_options]
addopts = "--doctest-modules --cov=. --cov-fail-under=100 --cov-report term-missing --ignore=docs/"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "pass",
    "continue",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "coverage_html_report"
